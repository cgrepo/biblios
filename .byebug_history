continue
next
continue
next
User.errors
usr.errors
continue
next
usr.authenticate(pretended)
continue
user.authenticate(pretended)
continue
pretended
next
continue
continui
pretended
usr
next
@user
params[:user][:authme]
params
params[:authme]
params[_authme]
@user
continue
next
pretended
pretend
next
continue
params[:authme]
params
params[:auth]
continue
@user.errors.full_messages.count
@user.errors.full_messages.push 'Error encontrado revise que tenga los datos correctos!'
@user.errors.full_messages
@user.errors.full_messages.count
@user.errors.full_messages << 'Error encontrado revise que tenga los datos correctos!'
@user.errors.full_messages.count
@user.errors.full_messages
continue
@user.errors.full_messages.methods.each { |m| puts m }
@user.errors.full_messages.methods
continue
@user.errors.count
@user.errors
continue
@user.errors.full_messages
@user.errors.full_messages.any?
continue
@user.errors.any?
@user.errors
continue
next
continue
next
@user
continue
@booksIDs
next
params[:order][:index]
continue
next
@borrows.count
@borrows
next
@booksIDs
@bookIDs
@boookIDs
continue
@booksIDs
next
continue
params[:order][:index]
params[:order]
params
continue
params
continue
next
continue
params[:borrow]
params[:order]
continue
next
@subscriptors
continue
next
continue
next
continue
Borrowed.where(returned:false).where(subscriptor_id:subscriptors).order(:subscriptor_id)
subscriptors = Subscriptor.where("fullname LIKE ?",'%'+params[:order][:name]+'%').pluck :id
subscriptors << subscriptors = Subscriptor.where("fullname LIKE ?",'%'+params[:borrow][:name]+'%').pluck :id
subscriptors = Subscriptor.where("fullname LIKE ?",'%'+params[:borrow][:name]+'%').pluck :id
subscriptors = []
continue
params[:order]
papaasd
continue
Borrowed.where(returned:false).where(subscriptor_id:subscriptors).count
Borrowed.where(returned:false).where(subscriptor_id:subscriptors)
Borrowed.where(returned:false).where(subscriptors)
continue
subscriptors
continue
@borrows
continue
@borrows
next
@borrows
next
@borrows
next
@borrows
continue
@subscriptors.pluck :fullname
@subscriptors.count
continue
next
continue
next
Borrowed.where(returned:false).where(:subscriptor_id => subscriptor).count
Borrowed.where(returned:false).where(:subscriptor_id => subscriptor)
continue
@subscriptors.each { |s| puts s}
next
continue
subscriptor
@borrows
next
@subscriptors
next
continue
coninue
params[:order][:index]
params[:order]
params[order]
params
continue
params
continue
params
continue
@borrows
continue
@borrows
next
continue
continmue
@borrows
next
continue
@borrow
@borrows
next
continue
cancel
step
borrow
next
continue
next
@borrows
continue
next
@borrows
continue
contineui
continue
next
continue
contine
@borrow
continue
next
params[:borrow]
params
paras
continue
params
continue
params
continue
params
continue
params
continue
params
continue
@rents
next
@rents
list
Borrowed.all.where(subscriptor:subscriptor).count
 subscriptor
continue
step
continue
@rents
next
continue
@subscriptors.each do |subscriptor|
@subscriptors
next
step
continue
next
list
@subscriptors.count
@subscriptors
next
step
@rents
step
stop
continue
@rents
next
continue
conttinue
continue
next
@subscriptors.all.count
@subscriptors.all
@subscriptors.count
@subscriptors
continue
Borrowed.all.where(subscriptor:@subscriptors).count
Borrowed.all.where(subscriptor:@subscriptor).count
@subscriptors.count
@subscriptors
continue
next
@subscriptors.pluck :account
@subscriptors.pluck account
@subscriptors
next
continue
next
@books[index-1].id
@books[index-1]
@books[index]
next
index
continue
index
continue
@books[index]
index
next
continue
index
continue
