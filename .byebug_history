continue
contineui
continue
next
continue
contine
@borrow
continue
next
params[:borrow]
params
paras
continue
params
continue
params
continue
params
continue
params
continue
params
continue
@rents
next
@rents
list
Borrowed.all.where(subscriptor:subscriptor).count
 subscriptor
continue
step
continue
@rents
next
continue
@subscriptors.each do |subscriptor|
@subscriptors
next
step
continue
next
list
@subscriptors.count
@subscriptors
next
step
@rents
step
stop
continue
@rents
next
continue
conttinue
continue
next
@subscriptors.all.count
@subscriptors.all
@subscriptors.count
@subscriptors
continue
Borrowed.all.where(subscriptor:@subscriptors).count
Borrowed.all.where(subscriptor:@subscriptor).count
@subscriptors.count
@subscriptors
continue
next
@subscriptors.pluck :account
@subscriptors.pluck account
@subscriptors
next
continue
next
@books[index-1].id
@books[index-1]
@books[index]
next
index
continue
index
continue
@books[index]
index
next
continue
index
continue
break
breakl
book.methods.grep /cur/
book.methods.grep /inde/
book.methods
book.id
@books.methods.grep /find/
@books.methods.grep /current/
@books.methods.grep /with/
@books.methods.grep /index/
continue
@books.number
@books.index
@books.count
@books.methods.grep /count/
@books.methods.grep /first/
@books.methods.grep /after/
@books.methods.grep /befo/
@books.methods.grep /index/
@books.methods.grep /index
@books.methods
book
next
book
next
list 10-20
list
bookx
continue
next
continue
next
continue
next
continue
step
Borrowed.all.where('subscriptor_id = ?',subscriptor).count
step
continue
subscriptor
step
Borrowed.subscriptor_limit_reached?(@subscriptor)
next
Borrowed.subscriptor_limit_reached?(@subscriptor)
continue
next
default_render unless performed?
next
continue
next
continue
 continue
continue
Borrowed.subscriptor_limit_reached?(@subscriptor)
next
continue
next
Borrowed.subscriptor_limit_reached?(@subscriptor)
Borrowed.methods.grep /reach/
@subscriptor
next
continue
Borrowed.where('subscriptor_id = ?',params[:account]).count
continue
Borrowed.where(subscriptor_id:params[:account]).count
next
continue
next
continue
next
continue
next
:index
next
continue
next
continue
next
continue
next
@failFlag
next
continue
params
continue
params
continue
contimune
break
continue
params
continue
next
continue
next
b = Borrowed.new(1,1,'12/12/12/','12/11/12')
list 10
exit
ls
cd ..
ls
cat -l
cat
next
list
show-source Borrowed.new
show-source Borrowed
show-source
ls
cd new
ls
cd Borrowed
quit
exit
ls profi
ls profile
ls profile*
ls profile
ls profie
profile
ls
cd ..
new
profile
ls
methods
cd profile
ls profile
ls pro
ls pro*
cd b
b = Book.new
cd ..
profile
dir
pwd
ls
cd instance_methods
cd profile=
cd profiles
cd profile
ls methods
ls method
ls pro
cd Book
exit
profile
ls pro
ls | grep pro
ls | pro
cd Book
exit
Book.profile
Book.connection
exit
ls pro
cd Book
cd book
l.class
l = Library.find_by number:4072
l = Library.find_by number:5072
l.class
l  =Library.where(number:4072)
Library.where(number:4072)
Library.where(number:4079)
Libraty.where(number:4079)
L = Library.find_by number:4072
s.library=L
L.class?
